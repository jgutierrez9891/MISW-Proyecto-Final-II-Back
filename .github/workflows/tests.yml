# Ejemplo de github action para probar python
# Docs: https://docs.github.com/es/actions/using-workflows/workflow-syntax-for-github-actions
name: Coverage test project CI

on:
  push:
    branches: 
      -   branch-cd-1
env:
  PROJECT_ID: ${{secrets.GOOGLE_PROJECT}} 
  GAR_LOCATION: us-central1 
  REPOSITORY: proyecto-2 
  REGION: us-central1 
  CANDIDATES_SERVICE: micro-candidatos # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE
jobs:
  #CANDIDATES
  test_candidates:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ 3.10.6 ]
    env:
      DB_USER: root
      DB_PASSWORD: root
      IF_TEST: "True"
    steps:
      - uses: actions/checkout@v1
      - name: Install candidate_db
        working-directory: ./candidate/database
        run: |
          sudo /etc/init.d/mysql start
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < database.sql
      - name: Install candidate environment
        working-directory: ./candidate/src
        run: |
          pip3 install -r requirements.txt
      - name: Run candidate unit tests
        working-directory: ./candidate/src
        run: |
          coverage run --include=./app.py,./tests/tests.py,./vistas/vistas.py -m unittest tests/* -v 
          coverage report --fail-under=80
          coverage html
          coverage xml
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  deploy_candidates:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: test_candidates
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest" ./candidate/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.CANDIDATES_SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest
          flags: '--allow-unauthenticated --max-instances=1 --port=8080 --add-cloudsql-instances=abcjobs'
          # NOTE: You can also set env variables here:
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}