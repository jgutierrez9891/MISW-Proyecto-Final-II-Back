name: Coverage test project CI

on:
  push:
    branches: 
      -   incluirCordova
env:
  PROJECT_ID: ${{secrets.GOOGLE_PROJECT}} 
  GAR_LOCATION: us-central1 
  REPOSITORY: proyecto-2 
  REGION: us-central1
  CANDIDATES_SERVICE: micro-candidatos # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
  AUTENTICACION_SERVICE: micro-autenticacion # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
  EMPRESA_SERVICE: micro-empresa # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
                            #para empleador pr ejemplo se debe crear una nueva variables para luego asignarla a l job de despliegue
jobs:
  #CANDIDATES


  #despliegue de candidato
  deploy_candidates:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.CANDIDATES_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest" ./candidate/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.CANDIDATES_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest #cambiar .env por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8080 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
  #AUTENTICACION
  #para cada micro debe haber dos job con su propio nombre, el primero apra tests y el segundo para despligue
  #tests de autenticacion


  #despliegue de autenticacion
  deploy_autenticacion:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.AUTENTICACION_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.AUTENTICACION_SERVICE }}:latest" ./autenticacion/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.AUTENTICACION_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.AUTENTICACION_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.AUTENTICACION_SERVICE }}:latest #cambiar env.AUTENTICACION_SERVICE por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8081 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
  #EMPRESA
  #para cada micro debe haber dos job con su propio nombre, el primero apra tests y el segundo para despligue
  #tests de autenticacion
  #despliegue de empresa
  deploy_empresa:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.EMPRESA_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EMPRESA_SERVICE }}:latest" ./empresa/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EMPRESA_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.EMPRESA_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EMPRESA_SERVICE }}:latest #cambiar env.EMPRESA_SERVICE por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8082 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}