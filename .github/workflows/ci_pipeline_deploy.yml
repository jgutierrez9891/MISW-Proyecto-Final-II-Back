name: Coverage test project CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  PROJECT_ID: ${{secrets.GOOGLE_PROJECT}} 
  GAR_LOCATION: us-central1 
  REPOSITORY: proyecto-2 
  REGION: us-central1
  CANDIDATES_SERVICE: micro-candidatos # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
  AUTENTICACION_SERVICE: micro-autenticacion # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
  EMPRESA_SERVICE: micro-empresa # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
  EQUIPOS_SERVICE: micro-equipos # CADA SERVICIO DEBE TENER SU PROPIA VARIABLE, 
                            #para empleador pr ejemplo se debe crear una nueva variables para luego asignarla a l job de despliegue
jobs:
  #CANDIDATES
  #para cada micro debe haber dos job con su propio nombre, el primero apra tests y el segundo para despligue
  #tests de candidato
  test_candidates:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ 3.10.6 ]
    env:
      DB_USER: root
      DB_PASSWORD: root
      IF_TEST: "True"
    steps:
      - uses: actions/checkout@v1
      - name: Install candidate_db
        working-directory: ./candidate/database #preparacion 1 para tests
        run: |
          sudo /etc/init.d/mysql start
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < database.sql
      - name: Install candidate environment #preparacion 2 para tests
        working-directory: ./candidate/src
        run: |
          pip3 install -r requirements.txt
      - name: Run candidate unit tests # tests
        working-directory: ./candidate/src
        run: |
          coverage run --include=./app.py,./tests/tests.py,./vistas/vistas.py -m unittest tests/* -v 
          coverage report --fail-under=80
          coverage html
          coverage xml
        env:
            JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}  
      - name: SonarCloud Scan #sonar cloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #despliegue de candidato
  deploy_candidates:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: test_candidates
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.CANDIDATES_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest" ./candidate/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.CANDIDATES_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CANDIDATES_SERVICE }}:latest #cambiar .env por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8080 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}
            JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
  #AUTENTICACION
  #para cada micro debe haber dos job con su propio nombre, el primero apra tests y el segundo para despligue
  #tests de autenticacion
  test_autenticacion:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ 3.10.6 ]
    env:
      DB_USER: root
      DB_PASSWORD: root
      IF_TEST: "True"
    steps:
      - uses: actions/checkout@v1
      - name: Install autenticacion_db
        working-directory: ./autenticacion/database #preparacion 1 para tests
        run: |
          sudo /etc/init.d/mysql start
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < database.sql
      - name: Install autenticacion environment #preparacion 2 para tests
        working-directory: ./autenticacion/src
        run: |
          pip3 install -r requirements.txt
      - name: Run autenticacion unit tests # tests
        working-directory: ./autenticacion/src
        run: |
          coverage run --include=./app.py,./tests/tests.py,./vistas/vistas.py -m unittest tests/* -v 
          coverage report --fail-under=80
          coverage html
          coverage xml
      - name: SonarCloud Scan #sonar cloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

  #despliegue de autenticacion
  deploy_autenticacion:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: test_autenticacion
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.AUTENTICACION_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.AUTENTICACION_SERVICE }}:latest" ./autenticacion/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.AUTENTICACION_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.AUTENTICACION_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.AUTENTICACION_SERVICE }}:latest #cambiar env.AUTENTICACION_SERVICE por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8081 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
  #EMPRESA
  #para cada micro debe haber dos job con su propio nombre, el primero apra tests y el segundo para despligue
  #tests de empresa
  test_empresa:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ 3.10.6 ]
    env:
      DB_USER: root
      DB_PASSWORD: root
      IF_TEST: "True"
    steps:
      - uses: actions/checkout@v1
      - name: Install empresa_db
        working-directory: ./gestionClientes/empresa/database #preparacion 1 para tests
        run: |
          sudo /etc/init.d/mysql start
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < database.sql
      - name: Install empresa environment #preparacion 2 para tests
        working-directory: ./gestionClientes/empresa/src
        run: |
          pip3 install -r requirements.txt
      - name: Run empresa unit tests # tests
        working-directory: ./gestionClientes/empresa/src
        run: |
          coverage run --include=./app.py,./tests/tests.py,./vistas/vistas.py -m unittest tests/* -v 
          coverage report --fail-under=80
          coverage html
          coverage xml
      - name: SonarCloud Scan #sonar cloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #despliegue de empresa
  deploy_empresa:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: test_empresa
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.EMPRESA_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EMPRESA_SERVICE }}:latest" ./gestionClientes/empresa/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EMPRESA_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.EMPRESA_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EMPRESA_SERVICE }}:latest #cambiar env.EMPRESA_SERVICE por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8082 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
  #EQUIPOS
  #para cada micro debe haber dos job con su propio nombre, el primero apra tests y el segundo para despligue
  #tests de equipos
  test_equipos:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ 3.10.6 ]
    env:
      DB_USER: root
      DB_PASSWORD: root
      IF_TEST: "True"
    steps:
      - uses: actions/checkout@v1
      - name: Install empresa_db
        working-directory: ./gestionClientes/equipos/database #preparacion 1 para tests
        run: |
          sudo /etc/init.d/mysql start
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < database.sql
      - name: Install equipos environment #preparacion 2 para tests
        working-directory: ./gestionClientes/equipos/src
        run: |
          pip3 install -r requirements.txt
      - name: Run equipos unit tests # tests
        working-directory: ./gestionClientes/equipos/src
        run: |
          coverage run --include=./app.py,./tests/tests.py,./vistas/vistas.py -m unittest tests/* -v 
          coverage report --fail-under=80
          coverage html
          coverage xml
        env:
            JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}  
      - name: SonarCloud Scan #sonar cloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #despliegue de equipos
  deploy_equipos:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: test_equipos
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0
        with:
            project_id: ${{secrets.GOOGLE_PROJECT}}
            service_account_key: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
            export_default_credentials: true

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and Push Container
        run: |- #en estas lineas al crear otro servicio solo se debe reemplazar env.EQUIPOS_SERVICE por env.SERVICIO_NUEVO que debio ser creado al inicio de este .yml
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EQUIPOS_SERVICE }}:latest" ./gestionClientes/equipos/src/
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EQUIPOS_SERVICE }}:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.EQUIPOS_SERVICE }} #cambiar .env por el servicio que corresponda
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.EQUIPOS_SERVICE }}:latest #cambiar env.EQUIPOS_SERVICE por el servicio que corresponda
          flags: '--allow-unauthenticated --max-instances=1 --port=8082 --add-cloudsql-instances=abcjobs' #tener presente que el puerto deberia ser didstinto en cada micro (o eso supongo yo daria menos problemas)
          env_vars: |
            SQL_PASSWORD=${{secrets.SQL_PASS}}
            JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}